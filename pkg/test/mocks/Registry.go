// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	policy "github.com/charithe/menshen/pkg/policy"
	mock "github.com/stretchr/testify/mock"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// AddWatcher provides a mock function with given fields: _a0, _a1
func (_m *Registry) AddWatcher(_a0 string, _a1 policy.RegistryWatcher) {
	_m.Called(_a0, _a1)
}

// GetChecker provides a mock function with given fields:
func (_m *Registry) GetChecker() *policy.Checker {
	ret := _m.Called()

	var r0 *policy.Checker
	if rf, ok := ret.Get(0).(func() *policy.Checker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*policy.Checker)
		}
	}

	return r0
}

// GetConditionEvaluator provides a mock function with given fields: _a0, _a1
func (_m *Registry) GetConditionEvaluator(_a0 string, _a1 string) (policy.ConditionEvaluator, error) {
	ret := _m.Called(_a0, _a1)

	var r0 policy.ConditionEvaluator
	if rf, ok := ret.Get(0).(func(string, string) policy.ConditionEvaluator); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policy.ConditionEvaluator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction provides a mock function with given fields:
func (_m *Registry) NewTransaction() policy.Transaction {
	ret := _m.Called()

	var r0 policy.Transaction
	if rf, ok := ret.Get(0).(func() policy.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policy.Transaction)
		}
	}

	return r0
}

// RemoveWatcher provides a mock function with given fields: _a0
func (_m *Registry) RemoveWatcher(_a0 string) {
	_m.Called(_a0)
}

// Replace provides a mock function with given fields: _a0, _a1
func (_m *Registry) Replace(_a0 context.Context, _a1 policy.Transaction) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, policy.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Registry) Update(_a0 context.Context, _a1 policy.Transaction) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, policy.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
